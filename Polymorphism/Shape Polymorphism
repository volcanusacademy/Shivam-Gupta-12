/*Shape Polymorphism:

Create a basic hierarchy of shapes (e.g., Circle, Square, Triangle) with a
common method calculateArea(). Implement polymorphism by overriding this method 
in each shape class and demonstrate how you can calculate the area of different
shapes using polymorphism.*/


#include <iostream>
using namespace std;

class Shape {
public:
    virtual double Area() const = 0;
};

class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    double Area() const override {
        return 3.14159 * radius * radius;
    }
};

class Square : public Shape {
private:
    double side;

public:
    Square(double s) : side(s) {}

    double Area() const override {
        return side * side;
    }
};

class Triangle : public Shape {
private:
    double base;
    double height;

public:
    Triangle(double b, double h) : base(b), height(h) {}

    double Area() const override {
        return 0.5 * base * height;
    }
};

int main() {
    
    Circle circle(5);
    Square square(4);
    Triangle triangle(3, 6);

    Shape* shape1 = &circle;
    Shape* shape2 = &square;
    Shape* shape3 = &triangle;

    cout << "Area of circle: " << shape1->Area();
    cout << "\nArea of square: " << shape2->Area();
    cout << "\nArea of triangle: " << shape3->Area();

    return 0;
}